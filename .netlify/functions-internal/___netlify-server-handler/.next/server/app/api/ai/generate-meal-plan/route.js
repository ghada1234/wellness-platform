(()=>{var e={};e.id=4342,e.ids=[4342],e.modules={643:e=>{"use strict";e.exports=require("node:perf_hooks")},686:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>g,routeModule:()=>d,serverHooks:()=>h,workAsyncStorage:()=>l,workUnitAsyncStorage:()=>p});var s={};t.r(s),t.d(s,{POST:()=>c});var i=t(96559),a=t(48088),o=t(37719),n=t(32190),u=t(12321);async function c(e){try{console.log("API Key available:",!!process.env.GEMINI_API_KEY);let r=await e.json();console.log("Meal plan request body:",r);let t=await (0,u._)(r);return console.log("Meal plan result:",t),n.NextResponse.json(t)}catch(e){return console.error("Error in meal plan generation API:",e),n.NextResponse.json({error:"Failed to generate meal plan",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let d=new i.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/ai/generate-meal-plan/route",pathname:"/api/ai/generate-meal-plan",filename:"route",bundlePath:"app/api/ai/generate-meal-plan/route"},resolvedPagePath:"/Users/ghadaalani/Desktop/mind-main/src/app/api/ai/generate-meal-plan/route.ts",nextConfigOutput:"standalone",userland:s}),{workAsyncStorage:l,workUnitAsyncStorage:p,serverHooks:h}=d;function g(){return(0,o.patchFetch)({workAsyncStorage:l,workUnitAsyncStorage:p})}},1708:e=>{"use strict";e.exports=require("node:process")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4573:e=>{"use strict";e.exports=require("node:buffer")},7252:e=>{"use strict";e.exports=require("express")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12321:(e,r,t)=>{"use strict";t.d(r,{_:()=>l});var s=t(67218);t(79130);var i=t(13846),a=t(97955),o=t(17478);let n=a.z.object({age:a.z.number().describe("The age of the user."),gender:a.z.string().describe("The gender of the user."),height:a.z.number().describe("The height of the user in centimeters."),weight:a.z.number().describe("The weight of the user in kilograms."),activityLevel:a.z.string().describe("The activity level of the user (e.g., Sedentary, Lightly Active)."),goal:a.z.string().describe("The user's primary goal (e.g., Weight Loss, Muscle Gain)."),duration:a.z.coerce.number().describe("The number of days for the meal plan (e.g., 1, 7, 30)."),cuisine:a.z.string().optional().describe("The user's preferred cuisine (e.g., Italian, Any)."),allergies:a.z.string().optional().describe("A list of allergies the user has."),dislikes:a.z.string().optional().describe("A list of foods the user dislikes."),diet:a.z.string().optional().describe("Any specific dietary preference (e.g., Vegan, Keto).")}),u=a.z.object({name:a.z.string().describe("The name of the meal."),description:a.z.string().describe("A brief description of the meal."),ingredients:a.z.array(a.z.string()).describe("A list of ingredients for the meal."),instructions:a.z.string().describe("Step-by-step cooking instructions."),calories:a.z.number().describe("Estimated calories for the meal."),protein:a.z.number().describe("Estimated protein in grams."),carbohydrates:a.z.number().describe("Estimated carbohydrates in grams."),fat:a.z.number().describe("Estimated fat in grams.")}),c=a.z.object({day:a.z.string().describe("The day of the week (e.g., Day 1, Monday)."),breakfast:u,lunch:u,dinner:u,dailyTotals:a.z.object({calories:a.z.number().describe("Total estimated calories for the day."),protein:a.z.number().describe("Total estimated protein for the day."),carbohydrates:a.z.number().describe("Total estimated carbohydrates for the day."),fat:a.z.number().describe("Total estimated fat for the day.")})}),d=a.z.object({plan:a.z.array(c).describe("A meal plan for the specified duration.")});async function l(e){return h(e)}let p=i.ai.definePrompt({name:"generateMealPlanPrompt",input:{schema:n},output:{schema:d},prompt:`You are an expert nutritionist and chef. Create a personalized {{duration}}-day meal plan for the user based on the following details.

User Profile:
- Age: {{age}}
- Gender: {{gender}}
- Height: {{height}} cm
- Weight: {{weight}} kg
- Activity Level: {{activityLevel}}
- Primary Goal: {{goal}}

Dietary Preferences:
- Preferred Cuisine: {{#if cuisine}}{{cuisine}}{{else}}Any{{/if}}
- Allergies: {{#if allergies}}{{allergies}}{{else}}None specified{{/if}}
- Dislikes: {{#if dislikes}}{{dislikes}}{{else}}None specified{{/if}}
- Diet: {{#if diet}}{{diet}}{{else}}None specified{{/if}}

For each day, provide a breakfast, lunch, and dinner. For each meal, include:
1. A creative and appealing name.
2. A brief, enticing description.
3. A list of ingredients.
4. Step-by-step cooking instructions.
5. An estimation of calories, protein, carbohydrates, and fat.

Also, calculate the total estimated macronutrients for each day.

Ensure the plan is balanced, delicious, and aligns with the user's goal. Be creative and provide variety.
`}),h=i.ai.defineFlow({name:"generateMealPlanFlow",inputSchema:n,outputSchema:d},async e=>{let{output:r}=await p(e);return r});(0,o.D)([l]),(0,s.A)(l,"40cd267bd83e3533065c5b2debe0e7038a47b24820",null)},12412:e=>{"use strict";e.exports=require("assert")},13846:(e,r,t)=>{"use strict";t.d(r,{ai:()=>a});var s=t(97955),i=t(54563);let a=(0,s.genkit)({plugins:[(0,i.YF)()],model:"googleai/gemini-2.5-flash"})},16141:e=>{"use strict";e.exports=require("node:zlib")},16698:e=>{"use strict";e.exports=require("node:async_hooks")},18868:()=>{},19063:e=>{"use strict";e.exports=require("require-in-the-middle")},19185:e=>{"use strict";e.exports=require("dgram")},19771:e=>{"use strict";e.exports=require("process")},21820:e=>{"use strict";e.exports=require("os")},23998:(e,r,t)=>{"use strict";t.r(r),t.d(r,{"40cd267bd83e3533065c5b2debe0e7038a47b24820":()=>s._});var s=t(12321)},27910:e=>{"use strict";e.exports=require("stream")},28354:e=>{"use strict";e.exports=require("util")},29021:e=>{"use strict";e.exports=require("fs")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{"use strict";e.exports=require("path")},34631:e=>{"use strict";e.exports=require("tls")},37067:e=>{"use strict";e.exports=require("node:http")},37366:e=>{"use strict";e.exports=require("dns")},37830:e=>{"use strict";e.exports=require("node:stream/web")},44708:e=>{"use strict";e.exports=require("node:https")},44725:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=44725,e.exports=r},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},55591:e=>{"use strict";e.exports=require("https")},56801:e=>{"use strict";e.exports=require("import-in-the-middle")},57075:e=>{"use strict";e.exports=require("node:stream")},57975:e=>{"use strict";e.exports=require("node:util")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73024:e=>{"use strict";e.exports=require("node:fs")},73136:e=>{"use strict";e.exports=require("node:url")},73496:e=>{"use strict";e.exports=require("http2")},73566:e=>{"use strict";e.exports=require("worker_threads")},74075:e=>{"use strict";e.exports=require("zlib")},74998:e=>{"use strict";e.exports=require("perf_hooks")},76760:e=>{"use strict";e.exports=require("node:path")},77030:e=>{"use strict";e.exports=require("node:net")},77598:e=>{"use strict";e.exports=require("node:crypto")},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79551:e=>{"use strict";e.exports=require("url")},79646:e=>{"use strict";e.exports=require("child_process")},79748:e=>{"use strict";e.exports=require("fs/promises")},81630:e=>{"use strict";e.exports=require("http")},84297:e=>{"use strict";e.exports=require("async_hooks")},91645:e=>{"use strict";e.exports=require("net")},94735:e=>{"use strict";e.exports=require("events")}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[4447,6724,580,8906],()=>t(686));module.exports=s})();